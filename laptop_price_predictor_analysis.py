# -*- coding: utf-8 -*-
"""laptop-price-predictor-analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PUSoya4aCvc7Fui1D6eLvqOpu9MqgkP6

<h1 style="color: white; background-color: #550A35; padding: 10px;">Import Libraries and Load Dataset</h1>
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.ensemble import GradientBoostingRegressor
import xgboost as xgb
warnings.filterwarnings("ignore")

df=pd.read_csv("/kaggle/input/laptop-prices/Laptop-Price.csv")
print(df.info())
print(df.isnull().sum())
print(df.head())

df.drop(columns=['Unnamed: 16'], inplace=True)
df['Cpu Rate'] = df['Cpu Rate'].str.replace('GHz', '').astype(float)
df['Ram'] = df['Ram'].str.replace('GB', '').astype(int)
print(df.info())
print(df.isnull().sum())

"""<h1 style="color: white; background-color: #550A35; padding: 10px;">Exploratory Data Analysis (EDA)</h1>

"""

print(df.describe())

plt.figure(figsize=(10, 6))
sns.histplot(df['Price_euros'], bins=30, kde=True, color='#550A35')
plt.title('Distribution of Laptop Prices')
plt.xlabel('Price in Euros')
plt.ylabel('Frequency')
plt.show()

plt.figure(figsize=(10, 6))
sns.histplot(df['Ram'], bins=30, kde=True,color='#550A35')
plt.title('Distribution of RAM')
plt.xlabel('RAM (GB)')
plt.ylabel('Frequency')
plt.show()

plt.figure(figsize=(10, 6))
sns.histplot(df['Inches'], bins=30, kde=True,color='#550A35')
plt.title('Distribution of Screen Sizes')
plt.xlabel('Screen Size (Inches)')
plt.ylabel('Frequency')
plt.show()

plt.figure(figsize=(10, 6))
sns.scatterplot(x='Ram', y='Price_euros', data=df,color='#550A35')
plt.title('Price vs. RAM')
plt.xlabel('RAM (GB)')
plt.ylabel('Price in Euros')
plt.show()

plt.figure(figsize=(10, 6))
sns.scatterplot(x='Inches', y='Price_euros', data=df,color='#550A35')
plt.title('Price vs. Screen Size')
plt.xlabel('Screen Size (Inches)')
plt.ylabel('Price in Euros')
plt.show()

plt.figure(figsize=(14, 8))
sns.boxplot(x='Company', y='Price_euros', data=df)
plt.title('Price by Company')
plt.xlabel('Company')
plt.ylabel('Price in Euros')
plt.xticks(rotation=90)
plt.show()

plt.figure(figsize=(14, 8))
sns.boxplot(x='TypeName', y='Price_euros', data=df)
plt.title('Price by Laptop Type')
plt.xlabel('Laptop Type')
plt.ylabel('Price in Euros')
plt.xticks(rotation=90)
plt.show()

plt.figure(figsize=(14, 8))
sns.countplot(x='OpSys', data=df)
plt.title('Count of Operating Systems')
plt.xlabel('Operating System')
plt.ylabel('Count')
plt.xticks(rotation=90)
plt.show()

plt.figure(figsize=(10, 6))
sns.scatterplot(x='SSD', y='Price_euros', data=df,color='#550A35')
plt.title('Price vs. SSD Storage')
plt.xlabel('SSD Storage (GB)')
plt.ylabel('Price in Euros')
plt.show()

plt.figure(figsize=(10, 6))
sns.scatterplot(x='HDD', y='Price_euros', data=df,color='#550A35')
plt.title('Price vs. HDD Storage')
plt.xlabel('HDD Storage (GB)')
plt.ylabel('Price in Euros')
plt.show()

plt.figure(figsize=(10, 6))
sns.scatterplot(x='Flash Storage', y='Price_euros', data=df,color='#550A35')
plt.title('Price vs. Flash Storage')
plt.xlabel('Flash Storage (GB)')
plt.ylabel('Price in Euros')
plt.show()

plt.figure(figsize=(14, 8))
sns.boxplot(x='Cpu Brand', y='Price_euros', data=df)
plt.title('Price by CPU Brand')
plt.xlabel('CPU Brand')
plt.ylabel('Price in Euros')
plt.xticks(rotation=90)
plt.show()

plt.figure(figsize=(14, 8))
sns.boxplot(x='Gpu Brand', y='Price_euros', data=df)
plt.title('Price by GPU Brand')
plt.xlabel('GPU Brand')
plt.ylabel('Price in Euros')
plt.xticks(rotation=90)
plt.show()

numeric_df = df.select_dtypes(include=['number'])
correlation_matrix = numeric_df.corr()
plt.figure(figsize=(14, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')
plt.title('Correlation Heatmap')
plt.show()

sns.pairplot(df, diag_kind='kde', markers='+', palette='coolwarm')
plt.show()

plt.figure(figsize=(10, 6))
sns.scatterplot(x='Cpu Rate', y='Price_euros', data=df,color='#550A35')
plt.title('Price vs. CPU Rate')
plt.xlabel('CPU Rate (GHz)')
plt.ylabel('Price in Euros')
plt.show()

plt.figure(figsize=(14, 8))
sns.countplot(x='TypeName', data=df,color='#550A35')
plt.title('Count of Laptop Types')
plt.xlabel('Laptop Type')
plt.ylabel('Count')
plt.xticks(rotation=90)
plt.show()

plt.figure(figsize=(14, 8))
sns.boxplot(x='TypeName', y='Ram', data=df)
plt.title('RAM by Laptop Type')
plt.xlabel('Laptop Type')
plt.ylabel('RAM (GB)')
plt.xticks(rotation=90)
plt.show()

plt.figure(figsize=(10, 6))
sns.scatterplot(x='HDD', y='Price_euros', hue='TypeName', data=df)
plt.title('Price vs. HDD Storage by Laptop Type')
plt.xlabel('HDD Storage (GB)')
plt.ylabel('Price in Euros')
plt.show()

plt.figure(figsize=(14, 8))
sns.countplot(x='Company', data=df)
plt.title('Count of Companies')
plt.xlabel('Company')
plt.ylabel('Count')
plt.xticks(rotation=90)
plt.show()

"""<h1 style="color: white; background-color: #550A35; padding: 10px;">Models</h1>


"""

X = df.drop(columns=['Price_euros'])
y = df['Price_euros']

categorical_cols = ['Company', 'Product', 'TypeName', 'ScreenResolution', 'OpSys', 'Cpu Brand', 'Cpu Model', 'Gpu Brand', 'Gpu Model']
numerical_cols = ['Inches', 'Ram', 'Cpu Rate', 'SSD', 'HDD', 'Flash Storage', 'Hybrid']


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


preprocessor = ColumnTransformer(
    transformers=[
        ('num', 'passthrough', numerical_cols),
        ('cat', OneHotEncoder(handle_unknown='ignore'), categorical_cols)
    ])


models = {
    'Linear Regression': LinearRegression(),
    'Decision Tree': DecisionTreeRegressor(random_state=42),
    'Random Forest': RandomForestRegressor(random_state=42),
    'Gradient Boosting': GradientBoostingRegressor(random_state=42),
    'XGBoost': xgb.XGBRegressor(random_state=42)
}


model_names = []
mse_values = []
r2_values = []

for name, model in models.items():
    pipeline = Pipeline(steps=[('preprocessor', preprocessor), ('model', model)])
    pipeline.fit(X_train, y_train)
    y_pred = pipeline.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    model_names.append(name)
    mse_values.append(mse)
    r2_values.append(r2)
    print(f'{name} - MSE: {mse}, R^2: {r2}')


fig, ax = plt.subplots(1, 2, figsize=(14, 6))


sns.barplot(x=model_names, y=mse_values, ax=ax[0], palette="viridis")
ax[0].set_title('Model Comparison - MSE')
ax[0].set_ylabel('Mean Squared Error')
ax[0].set_xlabel('Model')
for item in ax[0].get_xticklabels():
    item.set_rotation(45)

sns.barplot(x=model_names, y=r2_values, ax=ax[1], palette="viridis")
ax[1].set_title('Model Comparison - R²')
ax[1].set_ylabel('R² Score')
ax[1].set_xlabel('Model')
for item in ax[1].get_xticklabels():
    item.set_rotation(45)


plt.tight_layout()
plt.show()